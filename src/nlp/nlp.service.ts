// src/symptoms/symptoms.service.ts
import { Injectable } from '@nestjs/common';

@Injectable()
export class NlpService {
  /**
   * Разбираем текст и возвращаем базовые формы симптомов,
   * учитывая их падежные варианты (номинатив/аккузатив).
   */
  extract(text: string): string[] {
    const found = new Set<string>();
    const lowered = text.toLowerCase();

    // ключ — базовая форма, значения — распространённые падежные варианты
    const dict: Record<string, string[]> = {
      кашель: ['кашель', 'кашляю', 'покашливаю'],
      лихорадка: ['температура', 'жар', 'повышение температуры', 'лихорадка'],
      озноб: ['озноб', 'знобит', 'дрожь', 'холод'],
      'головная боль': [
        'болит голова',
        'головная боль',
        'голова раскалывается',
      ],
      'боль в горле': ['болит горло', 'першит', 'першение', 'глотать больно'],
      насморк: ['насморк', 'заложен нос', 'течёт из носа'],
      чихание: ['чихаю', 'чихание'],
      мокрота: ['мокрота', 'откашливаюсь', 'влажный кашель'],
      одышка: ['одышка', 'тяжело дышать', 'запыхался', 'не хватает воздуха'],
      'потеря обоняния': [
        'не чувствую запахи',
        'пропало обоняние',
        'потеря обоняния',
        'потерял обоняние',
      ],
      'потеря вкуса': ['не чувствую вкус', 'пропал вкус', 'потеря вкуса'],
      слабость: ['усталость', 'слабость', 'разбитость', 'выжат'],
      'боль в груди': ['болит грудь', 'боль в груди', 'тянет за грудиной'],
      'свистящее дыхание': [
        'свист',
        'свистит при дыхании',
        'свистящее дыхание',
      ],
      'затруднённый выдох': [
        'не могу выдохнуть',
        'трудно выдыхать',
        'затруднённый выдох',
      ],
      конъюнктивит: [
        'красные глаза',
        'слезотечение',
        'жжение в глазах',
        'конъюнктивит',
      ],
      'увеличение лимфоузлов': [
        'воспалились лимфоузлы',
        'болят лимфоузлы',
        'опухоль на шее',
        'увеличение лимфоузлов',
      ],
      'налет на миндалинах': ['налёт на миндалинах', 'белые пятна в горле'],
    };

    for (const [base, forms] of Object.entries(dict)) {
      if (forms.some((f) => lowered.includes(f))) {
        found.add(base);
      }
    }

    return Array.from(found);
  }
}
